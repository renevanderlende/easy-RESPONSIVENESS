@CHARSET "UTF-8";

/************************************************/
/* easy RESPONSIVE|VIEW|NESS              (WIP) */
/************************************************/
/*
    TODO: Why must view come before scaling rules => maximized view can be scrolled off screen?
          (Needs to work indepedently!!!)
*/
.view                       { position  : relative; flex-direction: column;
                              overflow  : hidden;/* !!! Take notice !!! */
                              min-width : 320px; width : 20rem;       max-width : 20rem;
                              min-height: 568px; height: 35.55556rem; max-height: 35.55556rem }
                              /* 1:1.7778 initial W/H, override as required, max's too! */   
/*OLD*/
.view.square                { height: 20rem; max-height: 20rem; min-height: 320px }

[data-view^="P"]            { min-width : 320px; width : 20rem;       max-width : 20rem;
                              min-height: 568px; height: 35.55556rem; max-height: 35.55556rem }

[data-view^="L"]            { min-width : 568px; width : 35.55556rem; max-width : 35.55556rem;
                              min-height: 320px; height: 20rem;       max-height: 20rem }

[data-view^=".SQ"]          { height: 20rem; max-height: 20rem; min-height: 320px }

/* not yet...


Width = Aspect ratio * Height

Height = Width/Aspect ratio




@media all and (orientation: landscape) {
    .view                   { min-width : 568px; width : 35.55556rem; max-width : 35.55556rem;
                              min-height: 320px; height: 20rem;       max-height: 20rem; }
}
*/
/* for backgrounds and such */
.vview::after                { z-index: -1; position: absolute; top:0; right:0; bottom:0; left:0 }

.view-header,.view-footer   { flex-direction: row } 

.view-panel,.view-list      { flex: 1; flex-direction: column; overflow: auto; /* for views with scrollbar */ }
.view-list                  { justify-content: flex-start }

.view-content               { flex: 1 1 auto } /* content and list-rows */

.view-row, .view-list>*     { width: 100%; max-width: 100% }

/* [OPTIONAL] styling */
.view-header,.view-footer,
.view-toolbar               { align-content: center; align-items: center; text-align: center; vertical-align: baseline }

.view-header,.view-footer   { padding: 0 1rem }
.view-toolbar               { justify-content: flex-end }

.view-header                { position: sticky; height: 3rem }

.view-toolbar               { height: 3rem; padding: 0 1rem }
.view-toolbar>*             {}

/* [OPTIO-TORY] new starting point for your content, use as wrapper, override where needed */
.view-content               { flex: 1; position: relative; width: 100%; max-width: 100% }

/* [OPTIONAL] */
.view-content>iframe        { width: 100%; height: 100%; border: none }
/*
        USAGE example:

        <div class="view">
            <header class="view-header">NICE HEADER</header>
            <div class="view-list">
                <div class="view-content">

                    <!-- your content -->

                </div>
            </div>
            <footer class="view-footer">NICE FOOTER</footer>
        </div>
*/

.outer              { flex-direction: column; flex: 1 }
.inner              { flex-direction: column; flex: 1 }



/************************************************/
/* easy RESPONSIVE|POSITION|NESS          (WIP) */
/************************************************/
/* TODO: body LTR/RTL swapping */

[data-pos="L"]  { margin-right: auto }
[data-pos="R"]  { margin-left : auto }

[data-pos=""],
[data-pos="CH"] { margin-left: auto; margin-right : auto }
[data-pos="CV"] { margin-top : auto; margin-bottom: auto }
[data-pos="CC"] { margin: auto }


/************************************************/
/* easy RESPONSIVE|FLEXBOX-GRID|NESS            */
/************************************************/
/* base flexbox grid structure */
/* TODO: proper naming and parameter setup. Comment and usage. Move to JS? */

[data-patch],[data-patch]>*         { display: flex; flex-wrap: wrap; position: relative;
                                      width: 100%; height: 100%; overflow: hidden }

/* Default grid ratio => 9-patch */
[data-patch]>*,[data-patch^="3x"]>* { flex: 1 1 33.33333%; max-width:  33.33333% }
[data-patch]>*,[data-patch$="x3"]>* { height:   33.33333%; max-height: 33.33333% }

[data-patch^= "1x"]>* { flex:1 1 100%      ; max-width:100%       } [data-patch$= "x1"]>* { height:100%      ; max-height:100%       }
[data-patch^= "2x"]>* { flex:1 1  50%      ; max-width: 50%       } [data-patch$= "x2"]>* { height: 50%      ; max-height: 50%       }
[data-patch^= "4x"]>* { flex:1 1  25%      ; max-width: 25%       } [data-patch$= "x4"]>* { height: 25%      ; max-height: 25%       }
[data-patch^= "5x"]>* { flex:1 1  20%      ; max-width: 20%       } [data-patch$= "x5"]>* { height: 20%      ; max-height: 20%       }
[data-patch^= "6x"]>* { flex:1 1  16.66667%; max-width: 16.66667% } [data-patch$= "x6"]>* { height: 16.66667%; max-height: 16.66667% }
[data-patch^= "7x"]>* { flex:1 1  14.28571%; max-width: 14.28571% } [data-patch$= "x7"]>* { height: 14.28571%; max-height: 14.28571% }
[data-patch^= "8x"]>* { flex:1 1  12.5%    ; max-width: 12.5%     } [data-patch$= "x8"]>* { height: 12.5%    ; max-height: 12.5%     }
[data-patch^= "9x"]>* { flex:1 1  11.11111%; max-width: 11.11111% } [data-patch$= "x9"]>* { height: 11.11111%; max-height: 11.11111% }
[data-patch^="10x"]>* { flex:1 1  10%      ; max-width: 10%       } [data-patch$="x10"]>* { height: 10%      ; max-height: 10%       }
[data-patch^="11x"]>* { flex:1 1   9.09091%; max-width:  9.09091% } [data-patch$="x11"]>* { height:  9.09091%; max-height:  9.09091% }
[data-patch^="12x"]>* { flex:1 1   8.33333%; max-width:  8.33333% } [data-patch$="x12"]>* { height:  8.33333%; max-height:  8.33333% }
[data-patch^="13x"]>* { flex:1 1   7.69231%; max-width:  7.69231% } [data-patch$="x13"]>* { height:  7.69231%; max-height:  7.69231% }
[data-patch^="14x"]>* { flex:1 1   7.14286%; max-width:  7.14286% } [data-patch$="x14"]>* { height:  7.14286%; max-height:  7.14286% }
[data-patch^="15x"]>* { flex:1 1   6.66667%; max-width:  6.66667% } [data-patch$="x15"]>* { height:  6.66667%; max-height:  6.66667% }

[fill]>*:last-child   { max-width: 100% }



/*

:family-of-m

Now that we have the ability to style n-of-m, we can expand that out to style all of the children
where there are m of them directly underneath a parent node. The secret to this is using 
the CSS3 ~ non-adjacent sibling selector which will continue matching elements across siblings. 

For example, the selector:

img ~ span { ... }

will match a <span> if and only if one of its previous siblings was an <img> element regardless
of the number of siblings between them. Weâ€™ll combine this selector with our :nth-of-m-child pattern like so:

span:nth-child(1):nth-last-child(5) ~ span { ... }

This pattern will match any adjacent siblings to the first element of five, ie: the second through
the fifth of five. We can make it match the entire row by using a comma to match the first element as well.

span:nth-child(1):nth-last-child(5), 
    span:nth-child(1):nth-last-child(5) ~ span { ... }



Exactly 6 elements
li:nth-last-child(6):first-child,
li:nth-last-child(6):first-child ~ li    { font-weight: bold }

More or equal to 6 elements
li:nth-last-child(n+6),
li:nth-last-child(n+6) ~ li              { font-weight: bold }

Equal or less than 6 elements
li:nth-last-child(-n+6):first-child,
li:nth-last-child(-n+6):first-child ~ li { font-weight: bold }




The Grid System

I put Quantity Queries to use on a template that required a flexible grid system to display a list
of projects and news items. My aim to was to ensure that no orphaned elements would be left at the
end of the list, regardless of how many items were in the system. Using a more complex set of selectors,
I was able to create an effective grid system.

.panel:nth-child(3n),
.panel:nth-child(3n+1):last-child,
.panel:nth-child(6n+1):nth-last-child(4),
.panel:nth-child(6n+1):nth-last-child(4) ~ .panel,
.panel:nth-child(6n+4):nth-last-child(4),
.panel:nth-child(6n+4):nth-last-child(4) ~ .panel {
    width: 25%;
}

.panel:nth-child(6n+1),
.panel:nth-child(6n+6),
.panel:nth-child(6n+2):last-child,
.panel:nth-child(6n+4):nth-last-child(2),
.panel:nth-child(6n+4):nth-last-child(2) ~ .panel {
    width: 50%;
}







*/



    .some-span {
        display: inline-block;
        padding: 20px;
        margin-right: 20px;
        background-color: yellow;
    }


    /* The entire set of five */
    .some-span:first-child:nth-last-child(5) ~ .some-span, .some-span:first-child:nth-last-child(5) {
        background-color: green;
    }




/************************************************/
/* easy RESPONSIVE|QQ|NESS                      */
/************************************************/
/*
[data-qtyq]:nth-last-child(n   ), [data-qtyq]:nth-last-child(n   ) > * {}
[data-qtyq]:nth-last-child(n+1 ), [data-qtyq]:nth-last-child(n+1 ) > * {}
[data-qtyq]:nth-last-child(n+2 ), [data-qtyq]:nth-last-child(n+2 ) > * {}
[data-qtyq]:nth-last-child(n+3 ), [data-qtyq]:nth-last-child(n+3 ) > * {}
[data-qtyq]:nth-last-child(n+4 ), [data-qtyq]:nth-last-child(n+4 ) > * {}
[data-qtyq]:nth-last-child(n+5 ), [data-qtyq]:nth-last-child(n+5 ) > * {}
[data-qtyq]:nth-last-child(n+6 ), [data-qtyq]:nth-last-child(n+6 ) > * {}
[data-qtyq]:nth-last-child(n+7 ), [data-qtyq]:nth-last-child(n+7 ) > * {}
[data-qtyq]:nth-last-child(n+8 ), [data-qtyq]:nth-last-child(n+8 ) > * {}
[data-qtyq]:nth-last-child(n+9 ), [data-qtyq]:nth-last-child(n+9 ) > * {}
[data-qtyq]:nth-last-child(n+10), [data-qtyq]:nth-last-child(n+10) > * {}
[data-qtyq]:nth-last-child(n+11), [data-qtyq]:nth-last-child(n+11) > * {}
[data-qtyq]:nth-last-child(n+12), [data-qtyq]:nth-last-child(n+12) > * {}
[data-qtyq]:nth-last-child(n+13), [data-qtyq]:nth-last-child(n+13) > * {}
[data-qtyq]:nth-last-child(n+14), [data-qtyq]:nth-last-child(n+14) > * {}
*/


[dinm="28"]:nth-last-child(n+28):nth-last-child(-n+31):first-child,
[dinm="28"]:nth-last-child(n+28):nth-last-child(-n+31):first-child ~ [dinm="28"] { color: red }

/************************************************/
/* easy RESPONSIVE|QQ|NESS                      */
/************************************************/

.panel:nth-child(3n),
.panel:nth-child(3n+1):last-child,
.panel:nth-child(6n+1):nth-last-child(4),
.panel:nth-child(6n+1):nth-last-child(4) ~ .panel,
.panel:nth-child(6n+4):nth-last-child(4),
.panel:nth-child(6n+4):nth-last-child(4) ~ .panel {
    width: 25%;
}
.panel:nth-child(6n+1),
.panel:nth-child(6n+6),
.panel:nth-child(6n+2):last-child,
.panel:nth-child(6n+4):nth-last-child(2),
.panel:nth-child(6n+4):nth-last-child(2) ~ .panel {
    width: 50%;
}


